[{"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\index.js":"1","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\App.js":"2","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\Login.jsx":"3","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\context\\AuthContext.js":"4","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\firebase.js":"5","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\services\\firebaseLoginService.js":"6","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\Dashboard.jsx":"7","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\Profile\\ProfileSnap.jsx":"8","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\services\\userAccountService.js":"9","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\context\\ChatContext.js":"10","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\conversations\\Conversations.jsx":"11","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\conversations\\Conversation.jsx":"12","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\chat\\Chat.jsx":"13","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\services\\chatServices.js":"14","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\chat\\ChatInput.jsx":"15","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\chat\\ChatMessages.jsx":"16","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\chat\\Message.jsx":"17","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\Modal.jsx":"18","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\NewChat.jsx":"19","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\NewGroup.jsx":"20","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\context\\VideocallContext.js":"21","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\services\\videoCallService.js":"22","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\videoCall\\VideoCallBanner.jsx":"23","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\videoCall\\VideoCallDashboard.jsx":"24","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\videoCall\\VideoCard.jsx":"25","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\SendImage.jsx":"26","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\ImageDisplay.jsx":"27","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\ChangeStatus.jsx":"28","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\ChatInfo.jsx":"29","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\AddParticipants.jsx":"30","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\ProtectedRoute.jsx":"31"},{"size":366,"mtime":1635170989989,"results":"32","hashOfConfig":"33"},{"size":994,"mtime":1635164180808,"results":"34","hashOfConfig":"33"},{"size":2159,"mtime":1635171395431,"results":"35","hashOfConfig":"33"},{"size":1360,"mtime":1633691275013,"results":"36","hashOfConfig":"33"},{"size":620,"mtime":1633452871673,"results":"37","hashOfConfig":"33"},{"size":1584,"mtime":1633691096663,"results":"38","hashOfConfig":"33"},{"size":573,"mtime":1635229811116,"results":"39","hashOfConfig":"33"},{"size":3310,"mtime":1635328251155,"results":"40","hashOfConfig":"33"},{"size":1108,"mtime":1634044231518,"results":"41","hashOfConfig":"33"},{"size":893,"mtime":1635259284814,"results":"42","hashOfConfig":"33"},{"size":2496,"mtime":1635328530987,"results":"43","hashOfConfig":"33"},{"size":1217,"mtime":1635256908117,"results":"44","hashOfConfig":"33"},{"size":6355,"mtime":1635342766740,"results":"45","hashOfConfig":"33"},{"size":3084,"mtime":1635239138657,"results":"46","hashOfConfig":"33"},{"size":2799,"mtime":1633624679328,"results":"47","hashOfConfig":"33"},{"size":288,"mtime":1633601236960,"results":"48","hashOfConfig":"33"},{"size":2006,"mtime":1635328481451,"results":"49","hashOfConfig":"33"},{"size":542,"mtime":1635411895328,"results":"50","hashOfConfig":"33"},{"size":3027,"mtime":1635406050355,"results":"51","hashOfConfig":"33"},{"size":5637,"mtime":1635411845981,"results":"52","hashOfConfig":"33"},{"size":1522,"mtime":1635342779128,"results":"53","hashOfConfig":"33"},{"size":12375,"mtime":1635270678462,"results":"54","hashOfConfig":"33"},{"size":3200,"mtime":1635326989521,"results":"55","hashOfConfig":"33"},{"size":3884,"mtime":1635418261132,"results":"56","hashOfConfig":"33"},{"size":408,"mtime":1635267545641,"results":"57","hashOfConfig":"33"},{"size":3853,"mtime":1635418230375,"results":"58","hashOfConfig":"33"},{"size":807,"mtime":1635267538188,"results":"59","hashOfConfig":"33"},{"size":2135,"mtime":1635267516652,"results":"60","hashOfConfig":"33"},{"size":2614,"mtime":1635267527964,"results":"61","hashOfConfig":"33"},{"size":5082,"mtime":1635267518760,"results":"62","hashOfConfig":"33"},{"size":632,"mtime":1635164113081,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2tnpqm",{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\index.js",[],"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\App.js",[],"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\Login.jsx",[],"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\context\\AuthContext.js",["147"],"import { getAuth, onAuthStateChanged } from \"@firebase/auth\";\r\nimport { createContext, useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  loginUserFacebook,\r\n  loginUserGoogle,\r\n  logoutUser,\r\n} from \"../services/firebaseLoginService\";\r\n\r\nconst AuthContext = createContext({\r\n  currentUser: null,\r\n  loginUserGoogle: () => {},\r\n  loginUserFacebook: () => {},\r\n  logoutUser: () => {},\r\n});\r\n\r\nexport const useAuthContext = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nconst lsUserData = JSON.parse(localStorage.getItem(\"colloquy-userdata\"));\r\n\r\nexport const AuthContextProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(lsUserData || null);\r\n  const auth = getAuth();\r\n\r\n  useEffect(() => {\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        setCurrentUser(user);\r\n        localStorage.setItem(\"colloquy-userdata\", JSON.stringify(user));\r\n      } else {\r\n        localStorage.removeItem(\"colloquy-userdata\");\r\n        setCurrentUser(null);\r\n      }\r\n    });\r\n\r\n    return () => logoutUser(currentUser);\r\n  }, []);\r\n\r\n  const initialValue = {\r\n    currentUser: currentUser,\r\n    loginUserFacebook: loginUserFacebook,\r\n    loginUserGoogle: loginUserGoogle,\r\n    logoutUser: logoutUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={initialValue}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\firebase.js",[],"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\services\\firebaseLoginService.js",["148","149","150"],"import {\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  FacebookAuthProvider,\r\n  signOut,\r\n  getAuth,\r\n} from \"firebase/auth\";\r\nimport { doc, setDoc, serverTimestamp } from \"firebase/firestore\";\r\nimport { db } from \"../firebase\";\r\n\r\nconst auth = getAuth();\r\n\r\nexport const loginUserGoogle = async () => {\r\n  const googleProvider = new GoogleAuthProvider();\r\n\r\n  try {\r\n    const { user } = await signInWithPopup(auth, googleProvider);\r\n\r\n    const userData = {\r\n      name: user.displayName,\r\n      email: user.email,\r\n      profilePicUrl: user.photoURL,\r\n      lastSeen: serverTimestamp(),\r\n      online: true,\r\n    };\r\n\r\n    const result = await setDoc(doc(db, \"users\", user.uid), userData, {\r\n      merge: true,\r\n    });\r\n    return user;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nexport const loginUserFacebook = async () => {\r\n  const fbProvider = new FacebookAuthProvider();\r\n\r\n  try {\r\n    const { user } = await signInWithPopup(auth, fbProvider);\r\n\r\n    const userData = {\r\n      name: user.displayName,\r\n      email: user.email,\r\n      profilePicUrl: user.photoURL,\r\n      lastSeen: serverTimestamp(),\r\n      online: true,\r\n    };\r\n\r\n    const result = await setDoc(doc(db, \"users\", user.uid), userData, {\r\n      merge: true,\r\n    });\r\n    return user;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nexport const logoutUser = async (user) => {\r\n  const userData = {\r\n    lastSeen: serverTimestamp(),\r\n    online: false,\r\n  };\r\n\r\n  const result = await setDoc(doc(db, \"users\", user.uid), userData, {\r\n    merge: true,\r\n  });\r\n  await signOut(auth);\r\n};\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\Dashboard.jsx",[],"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\Profile\\ProfileSnap.jsx",["151","152","153"],"import { useEffect, useState } from \"react\";\r\nimport { useHistory, withRouter } from \"react-router\";\r\nimport { useAuthContext } from \"../../../context/AuthContext\";\r\nimport {\r\n  getUserData,\r\n  getUserConversations,\r\n} from \"../../../services/userAccountService\";\r\nimport Modal from \"../../Modal\";\r\nimport ChangeStatus from \"../modals/ChangeStatus\";\r\n\r\nconst ProfileSnapWithoutRouter = () => {\r\n  const { currentUser, logoutUser } = useAuthContext();\r\n\r\n  const [userData, setUserData] = useState({});\r\n  const [openOptions, setOpenOptions] = useState(false);\r\n  const [changeStatus, setChangeStatus] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const getUser = async () => {\r\n    const data = await getUserData(currentUser.uid);\r\n    setUserData(data);\r\n  };\r\n\r\n  const logout = async () => {\r\n    logoutUser(currentUser);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex flex-row justify-between items-center text-gray-100\">\r\n      <div className=\"flex items-top p-4 space-x-4\">\r\n        <img\r\n          src={currentUser.photoURL}\r\n          className=\"h-12 w-12 lg:h-15 lg:w-15 rounded-full\"\r\n        ></img>\r\n        <div className=\"flex flex-col space-y-2\">\r\n          <p className=\"text-sm lg:text-xl font-semibold break-words\">\r\n            {currentUser.displayName}\r\n          </p>\r\n          <p className=\"break-all text-sm\">{userData.status}</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Options */}\r\n      <div\r\n        className=\"justify-self-end flex flex-col relative m-1\"\r\n        onMouseEnter={() => setOpenOptions(true)}\r\n        onMouseLeave={() => setOpenOptions(false)}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"h-6 w-6 hover:text-cfblue-500 cursor-pointer\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\r\n          />\r\n        </svg>\r\n\r\n        {openOptions && (\r\n          <div className=\"absolute top-6 right-3 flex flex-col bg-black border border-gray-700 rounded-md\">\r\n            <button\r\n              onClick={() => setChangeStatus(true)}\r\n              className=\"p-2 flex justify-center items-center whitespace-nowrap hover:bg-cfblue-500 rounded-md  transition-colors duration-300 ease-in-out\"\r\n            >\r\n              Edit status\r\n            </button>\r\n            <button\r\n              onClick={logout}\r\n              className=\"p-2 hover:bg-cfblue-500 rounded-md  flex justify-center items-center transition-colors duration-300 ease-in-out\"\r\n            >\r\n              Logout\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {changeStatus && (\r\n        <Modal isOpen={setChangeStatus}>\r\n          <ChangeStatus\r\n            setIsOpen={setChangeStatus}\r\n            updateUserData={setUserData}\r\n            userId={currentUser.uid}\r\n          ></ChangeStatus>\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileSnap = withRouter(ProfileSnapWithoutRouter);\r\n\r\nexport default ProfileSnap;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\services\\userAccountService.js",["154"],"import { doc, getDoc } from \"firebase/firestore\";\r\nimport { db } from \"../firebase\";\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  onSnapshot,\r\n  setDoc,\r\n} from \"firebase/firestore\";\r\n\r\nexport const getUserData = async (userId) => {\r\n  const docSnap = await getDoc(doc(db, \"users\", userId));\r\n  if (docSnap.exists()) {\r\n    return docSnap.data();\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const getUserConversations = async (userId, setChats) => {\r\n  const q = query(\r\n    collection(db, \"conversations\"),\r\n    where(\"participants\", \"array-contains\", userId)\r\n  );\r\n  const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n    const tempChats = [];\r\n    querySnapshot.forEach((doc) => {\r\n      tempChats.push({ id: doc.id, ...doc.data() });\r\n    });\r\n\r\n    setChats([...tempChats]);\r\n  });\r\n};\r\n\r\nexport const changeUserStatus = async (userId, updatedStatus) => {\r\n  try {\r\n    const userData = {\r\n      status: updatedStatus,\r\n    };\r\n\r\n    const result = await setDoc(doc(db, \"users\", userId), userData, {\r\n      merge: true,\r\n    });\r\n    return result;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\context\\ChatContext.js",["155"],"import { createContext, useEffect, useState, useContext } from \"react\";\r\nimport { getUserConversations } from \"../services/userAccountService\";\r\nimport { useAuthContext } from \"./AuthContext\";\r\n\r\nconst ChatContext = createContext({\r\n  chats: [],\r\n  setChats: () => {},\r\n  openedChat: null,\r\n  setOpenedChat: () => {},\r\n});\r\n\r\nexport const useChatContext = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport const ChatContextProvider = ({ children }) => {\r\n  const [chats, setChats] = useState([]);\r\n  const [openedChat, setOpenedChat] = useState();\r\n  const { currentUser } = useAuthContext();\r\n\r\n  useEffect(() => {\r\n    getUserConversations(currentUser.uid, setChats);\r\n  }, []);\r\n\r\n  const initialValue = {\r\n    chats,\r\n    setChats,\r\n    openedChat,\r\n    setOpenedChat,\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={initialValue}>{children}</ChatContext.Provider>\r\n  );\r\n};\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\conversations\\Conversations.jsx",[],"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\conversations\\Conversation.jsx",["156","157"],"import { useEffect, useState } from \"react\";\r\nimport { useAuthContext } from \"../../../context/AuthContext\";\r\nimport { useChatContext } from \"../../../context/ChatContext\";\r\nimport { getUserData } from \"../../../services/userAccountService\";\r\n\r\nconst Conversation = ({ chat, setOpenedChat }) => {\r\n  const { currentUser } = useAuthContext();\r\n  const [chatName, setChatName] = useState(\"\");\r\n\r\n  const getUserName = async (userId) => {\r\n    const userData = await getUserData(userId);\r\n    chat.dualName = userData.name;\r\n    chat.dualParticipant = userData;\r\n    setChatName(userData.name);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chat.group) {\r\n      setChatName(chat.name);\r\n    } else {\r\n      for (let p of chat.participants) {\r\n        if (p !== currentUser.uid) {\r\n          getUserName(p);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"w-full text-gray-300 hover:bg-cfblue-600 hover:text-cfblue-200 border-t border-gray-700 p-4 h-16 transition-colors duration-800 ease-in-out cursor-pointer\"\r\n      onClick={() => setOpenedChat(chat)}\r\n    >\r\n      <p className=\"lg:text-lg font-semibold\">{chatName}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Conversation;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\chat\\Chat.jsx",["158","159"],"import { useChatContext } from \"../../../context/ChatContext\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  getChatParticipants,\r\n  getUserChats,\r\n} from \"../../../services/chatServices\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport ChatMessages from \"./ChatMessages\";\r\n\r\nimport { useAuthContext } from \"../../../context/AuthContext\";\r\nimport { getUserData } from \"../../../services/userAccountService\";\r\nimport { useVideoCallContext } from \"../../../context/VideocallContext\";\r\nimport { useHistory, withRouter } from \"react-router\";\r\nimport Modal from \"../../Modal\";\r\nimport ChatInfo from \"../modals/ChatInfo\";\r\nimport AddParticipants from \"../modals/AddParticipants\";\r\n\r\nconst ChatWithoutRouter = () => {\r\n  const [chatData, setChatData] = useState();\r\n  const [participants, setParticipants] = useState([]);\r\n  const [dualChatParticipant, setDualChatParticipant] = useState();\r\n  const [participantString, setParticipantString] = useState(\"\");\r\n  const [chatName, setChatName] = useState(\"\");\r\n  const [chatInfo, setChatInfo] = useState(false);\r\n  const [addParticipants, setAddParticipants] = useState(false);\r\n\r\n  const bottomRef = useRef();\r\n\r\n  const { openedChat } = useChatContext();\r\n  const videoCallCtx = useVideoCallContext();\r\n  const { currentUser } = useAuthContext();\r\n\r\n  const history = useHistory();\r\n\r\n  // Get Chat name in case dualname is not set\r\n  const getUserName = async (userId) => {\r\n    const userData = await getUserData(userId);\r\n    setDualChatParticipant(userData);\r\n    setChatName(userData.name);\r\n  };\r\n\r\n  // Get participant names\r\n  const getParticipants = async () => {\r\n    const res = await getChatParticipants(openedChat?.participants);\r\n    let pString = \"\";\r\n    res.map((p) => {\r\n      pString = pString + \", \" + p.name;\r\n    });\r\n    setParticipantString(pString.substr(2));\r\n    setParticipants([...res]);\r\n  };\r\n\r\n  // Create call\r\n  const videoCallUsers = () => {\r\n    const callUsersList = participants\r\n      .map((p) => p.id)\r\n      .filter((p) => p !== currentUser.uid);\r\n    videoCallCtx.setUsersList(callUsersList);\r\n    videoCallCtx.setCreatedCall(true);\r\n    history.push(\"/videocall\");\r\n  };\r\n\r\n  const scrollIntoView = () => {\r\n    bottomRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setParticipants([]);\r\n    setParticipantString(\"\");\r\n    if (openedChat) {\r\n      getUserChats(openedChat?.messagesRef, setChatData, scrollIntoView);\r\n      getParticipants();\r\n\r\n      // Get user name if dual name is not set\r\n      if (!openedChat.group && !openedChat.dualName) {\r\n        for (let p of openedChat.participants) {\r\n          if (p !== currentUser.uid) {\r\n            getUserName(p);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      setDualChatParticipant(openedChat.dualParticipant);\r\n    }\r\n  }, [openedChat]);\r\n\r\n  useEffect(() => {\r\n    scrollIntoView();\r\n  }, [chatData]);\r\n\r\n  return openedChat ? (\r\n    <div className=\"grid grid-rows-6 grid-cols-1 w-full h-full bg-pale-white rounded-md mt-2 sm:mt-0 sm:ml-2\">\r\n      {/* Chat Header */}\r\n      <div className=\"bg-gray-100 text-gray-900 shadow-lg rounded-md px-6 py-2 flex justify-between items-center\">\r\n        <div\r\n          onClick={() => setChatInfo(true)}\r\n          className=\"flex flex-col cursor-pointer hover:text-cfblue-600\"\r\n        >\r\n          {openedChat.group && (\r\n            <p className=\"text-2xl font-bold\">{openedChat.name}</p>\r\n          )}\r\n          {!openedChat.group && (\r\n            <p className=\"text-2xl font-bold\">{openedChat.dualName}</p>\r\n          )}\r\n          {!openedChat.name && !openedChat.dualName && (\r\n            <p className=\"text-2xl font-bold\">{chatName}</p>\r\n          )}\r\n          {openedChat.group && (\r\n            <p className=\"text-sm text-gray-600\">\r\n              {`Members: ` + participantString}\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"flex items-center space-x-6\">\r\n          {/* Add new participants */}\r\n          {openedChat.group && (\r\n            <div\r\n              onClick={() => setAddParticipants(true)}\r\n              className=\"cursor-pointer hover:text-cfblue-600\"\r\n            >\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"h-8 w-8\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth={2}\r\n                  d=\"M12 4v16m8-8H4\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          )}\r\n\r\n          {/* Video call button */}\r\n          <div\r\n            onClick={videoCallUsers}\r\n            className=\"cursor-pointer hover:text-cfblue-600\"\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"h-9 w-9\"\r\n              viewBox=\"0 0 20 20\"\r\n              fill=\"currentColor\"\r\n            >\r\n              <path d=\"M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z\" />\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chat Messages Component */}\r\n      <div className=\" row-span-5 overflow-y-scroll no-scrollbar\">\r\n        {chatData && <ChatMessages messages={chatData} />}\r\n        <div ref={bottomRef}></div>\r\n      </div>\r\n\r\n      {/* Chat Input */}\r\n      <div className=\"row-span-1 mt-1\">\r\n        <ChatInput chatId={openedChat?.messagesRef} />\r\n      </div>\r\n\r\n      {chatInfo && (\r\n        <Modal isOpen={chatInfo}>\r\n          <ChatInfo\r\n            isGroup={openedChat.group}\r\n            setIsOpen={setChatInfo}\r\n            participantInfo={\r\n              openedChat.group\r\n                ? { ...openedChat, participants }\r\n                : dualChatParticipant\r\n            }\r\n          ></ChatInfo>\r\n        </Modal>\r\n      )}\r\n\r\n      {addParticipants && (\r\n        <Modal isOpen={addParticipants}>\r\n          <AddParticipants\r\n            setIsOpen={setAddParticipants}\r\n            participants={participants}\r\n          ></AddParticipants>\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nconst Chat = withRouter(ChatWithoutRouter);\r\nexport default Chat;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\services\\chatServices.js",["160","161"],"import {\r\n  arrayUnion,\r\n  collection,\r\n  doc,\r\n  onSnapshot,\r\n  updateDoc,\r\n  query,\r\n  where,\r\n  getDocs,\r\n  getDoc,\r\n  documentId,\r\n  addDoc,\r\n} from \"@firebase/firestore\";\r\nimport { db, storage } from \"../firebase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { getDownloadURL, ref, uploadBytes } from \"@firebase/storage\";\r\n\r\nexport const getUserChats = async (docId, setChatData) => {\r\n  const unsubscribe = onSnapshot(doc(db, \"messages\", docId), (doc) => {\r\n    setChatData(doc.data());\r\n  });\r\n\r\n  return unsubscribe;\r\n};\r\n\r\nexport const sendChatMessage = async (docId, messageData) => {\r\n  const result = await updateDoc(doc(db, \"messages\", docId), {\r\n    message: arrayUnion(messageData),\r\n  });\r\n};\r\n\r\nexport const getChatParticipants = async (participants) => {\r\n  const q = query(\r\n    collection(db, \"users\"),\r\n    where(documentId(), \"in\", participants)\r\n  );\r\n  const querySnapshot = await getDocs(q);\r\n\r\n  let res = [];\r\n  querySnapshot.forEach((doc) => {\r\n    res.push({ id: doc.id, ...doc.data() });\r\n  });\r\n  return res;\r\n};\r\n\r\nexport const getUsersList = async () => {\r\n  const querySnapshot = await getDocs(collection(db, \"users\"));\r\n  const res = [];\r\n  querySnapshot.forEach((doc) => {\r\n    res.push({ id: doc.id, ...doc.data() });\r\n  });\r\n  return res;\r\n};\r\n\r\nexport const createNewDualChat = async (userid1, userid2) => {\r\n  const q = query(\r\n    collection(db, \"conversations\"),\r\n    where(\"group\", \"==\", false),\r\n    where(\"participants\", \"in\", [\r\n      [userid1, userid2],\r\n      [userid2, userid1],\r\n    ])\r\n  );\r\n\r\n  const querySnapshot = await getDocs(q);\r\n  // conversation already exists\r\n  let docData;\r\n  querySnapshot.forEach((doc) => {\r\n    docData = doc.data();\r\n  });\r\n  if (docData) {\r\n    return docData;\r\n  } else {\r\n    // No conversation exists\r\n    const messageRef = await addDoc(collection(db, \"messages\"), {\r\n      message: [],\r\n    });\r\n    const docRef = await addDoc(collection(db, \"conversations\"), {\r\n      group: false,\r\n      messagesRef: messageRef.id,\r\n      participants: [userid1, userid2],\r\n    });\r\n\r\n    const docSnap = await getDoc(doc(db, \"conversations\", docRef.id));\r\n\r\n    return docSnap.data();\r\n  }\r\n};\r\n\r\nexport const createNewGroupChat = async (participants, groupName) => {\r\n  const messageRef = await addDoc(collection(db, \"messages\"), {\r\n    message: [],\r\n  });\r\n\r\n  const docRef = await addDoc(collection(db, \"conversations\"), {\r\n    name: groupName,\r\n    group: true,\r\n    messagesRef: messageRef.id,\r\n    participants: participants,\r\n  });\r\n\r\n  const docSnap = await getDoc(doc(db, \"conversations\", docRef.id));\r\n  return docSnap.data();\r\n};\r\n\r\nexport const sendImageMessage = async (file) => {\r\n  const storageRef = ref(storage, \"images/\" + uuidv4());\r\n  const uploadFile = await uploadBytes(storageRef, file);\r\n  const fileURL = await getDownloadURL(storageRef);\r\n  return fileURL;\r\n};\r\n\r\nexport const addParticipantsGroup = async (docId, addedUsers) => {\r\n  const result = await updateDoc(doc(db, \"conversations\", docId), {\r\n    participants: arrayUnion(...addedUsers),\r\n  });\r\n\r\n  return result;\r\n};\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\chat\\ChatInput.jsx",["162"],"import { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useAuthContext } from \"../../../context/AuthContext\";\r\nimport { sendChatMessage } from \"../../../services/chatServices\";\r\nimport Modal from \"../../Modal\";\r\nimport SendImage from \"../modals/SendImage\";\r\n\r\nconst ChatInput = ({ chatId }) => {\r\n  const { currentUser } = useAuthContext();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [openSendPictureModal, setOpenSendPictureModal] = useState(false);\r\n\r\n  const sendMessageHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (!message) return;\r\n    const messageData = {\r\n      id: uuidv4(),\r\n      content: message,\r\n      createdAt: Date.now(),\r\n      senderId: currentUser.uid,\r\n      senderName: currentUser.displayName,\r\n    };\r\n\r\n    setMessage(\"\");\r\n    const result = await sendChatMessage(chatId, messageData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-4\">\r\n      <form\r\n        onSubmit={sendMessageHandler}\r\n        className=\"flex items-center justify-between w-full m-2 h-full space-x-3\"\r\n      >\r\n        {/* Chat message input */}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Send a message\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          className=\"w-10/12 p-3 rounded-xl outline-none border-2 focus:border-cfblue-300 focus:placeholder-cfblue-300 text-gray-800 \"\r\n        ></input>\r\n\r\n        {/* Send image */}\r\n        <div\r\n          onClick={() => setOpenSendPictureModal((prev) => !prev)}\r\n          className=\"flex items-center justify-center hover:text-cfblue-600 cursor-pointer text-gray-400\"\r\n        >\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"h-10 w-10\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13\"\r\n            />\r\n          </svg>\r\n        </div>\r\n\r\n        {/* Send message */}\r\n        <div className=\"w-2/12 flex justify-center items-center\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"p-3 w-full rounded-xl bg-cfblue-600 hover:bg-cfblue-700 transition-colors duration-400 ease-in-out\"\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      {openSendPictureModal && (\r\n        <Modal isOpen={setOpenSendPictureModal}>\r\n          <SendImage\r\n            setIsOpen={setOpenSendPictureModal}\r\n            chatId={chatId}\r\n          ></SendImage>\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\chat\\ChatMessages.jsx",[],"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\chat\\Message.jsx",["163","164"],"import { formatDistanceToNowStrict } from \"date-fns\";\r\nimport { useState } from \"react\";\r\nimport { useAuthContext } from \"../../../context/AuthContext\";\r\nimport Modal from \"../../Modal\";\r\nimport ImageDisplay from \"../modals/ImageDisplay\";\r\n\r\nconst Message = ({ content, senderName, senderId, createdAt, image }) => {\r\n  const { currentUser } = useAuthContext();\r\n  const [openImageModal, setOpenImageModal] = useState(false);\r\n\r\n  return currentUser.uid === senderId ? (\r\n    <>\r\n      <div className=\"self-end bg-white text-gray-900 shadow-md rounded-xl p-2 max-w-1/2 flex flex-col\">\r\n        <p className=\"font-semibold mb-1 lg:text-lg text-gray-900 \">\r\n          {senderName}\r\n        </p>\r\n        {image && (\r\n          <img\r\n            src={image}\r\n            className=\"max-h-20 lg:max-h-60 cursor-pointer\"\r\n            // onClick={() => {\r\n            //   setOpenImageModal(true);\r\n            // }}\r\n          ></img>\r\n        )}\r\n        <p className=\"text-gray-800 break-words\">{content}</p>\r\n        <p className=\"text-xs text-gray-500\">\r\n          {formatDistanceToNowStrict(new Date(createdAt)) + \" ago\"}\r\n        </p>\r\n      </div>\r\n      {openImageModal && (\r\n        <Modal isOpen={setOpenImageModal}>\r\n          <ImageDisplay\r\n            setIsOpen={setOpenImageModal}\r\n            imageURL={image}\r\n          ></ImageDisplay>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  ) : (\r\n    <>\r\n      <div className=\"self-start bg-cfblue-500 text-gray-200 shadow-md rounded-xl p-2 max-w-1/2 flex flex-col\">\r\n        <p className=\"font-semibold mb-1 text-lg text-gray-100\">{senderName}</p>\r\n        {image && (\r\n          <img\r\n            src={image}\r\n            className=\"max-h-20 lg:max-h-60 cursor-pointer\"\r\n          ></img>\r\n        )}\r\n        <p className=\"text-gray-100 break-words\">{content}</p>\r\n        <p className=\"text-xs text-gray-300\">\r\n          {formatDistanceToNowStrict(new Date(createdAt)) + \" ago\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\Modal.jsx",["165","166","167"],"import { useRef, useEffect, createContext } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nconst Modal = ({ children, isOpen }) => {\r\n  if (isOpen) {\r\n    return createPortal(\r\n      <>\r\n        <div className=\"fixed inset-0 bg-black opacity-60 z-100\"></div>\r\n        <div className=\"fixed inset-0 z-100 flex justify-center items-center\">\r\n          <div className=\"max-h-4/5 w-1/3\">{children}</div>\r\n        </div>\r\n      </>,\r\n      document.getElementById(\"modal\")\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Modal;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\NewChat.jsx",["168","169","170","171"],"import { useEffect, useState, useRef, useContext } from \"react\";\r\nimport {\r\n  getUsersList,\r\n  createNewDualChat,\r\n} from \"../../../services/chatServices\";\r\nimport { useChatContext } from \"../../../context/ChatContext\";\r\nimport { useAuthContext } from \"../../../context/AuthContext\";\r\n\r\nconst NewChat = ({ setIsOpen }) => {\r\n  const [usersList, setUsersList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const wrapperRef = useRef(null);\r\n  const { setOpenedChat } = useChatContext();\r\n  const { currentUser } = useAuthContext();\r\n\r\n  // Create new chat\r\n  const createNewChat = async (userId) => {\r\n    const openedChat = await createNewDualChat(userId, currentUser.uid);\r\n    setOpenedChat(openedChat);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  // Handler for closing the modal\r\n  const handleClickOutside = (e) => {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getUsers = async () => {\r\n      let res = await getUsersList();\r\n      setUsersList(res);\r\n      setLoading(false);\r\n    };\r\n\r\n    getUsers();\r\n\r\n    // Close the modal on click outside\r\n    document.addEventListener(\"click\", handleClickOutside, false);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClickOutside, false);\r\n    };\r\n  }, []);\r\n  return (\r\n    <div\r\n      className=\"bg-black text-white h-full w-full rounded-md p-2\"\r\n      ref={wrapperRef}\r\n    >\r\n      {/* Header */}\r\n      <div className=\"h-1/8 p-4 text-xl font-semibold border-b-2 border-cfblue-400\">\r\n        Start a new chat\r\n      </div>\r\n\r\n      {/* List of people scrollable */}\r\n      {loading && (\r\n        <div className=\"flex items-center justify-center space-x-2 mt-32 animate-bounce\">\r\n          <div className=\"w-4 h-4 bg-cfblue-600 rounded-full\"></div>\r\n          <div className=\"w-4 h-4 bg-cfblue-600 rounded-full\"></div>\r\n          <div className=\"w-4 h-4 bg-cfblue-600 rounded-full\"></div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"h-5/6 flex flex-col m-4\">\r\n        <div className=\"overflow-y-scroll no-scrollbar\">\r\n          {usersList.map((user) => {\r\n            if (currentUser.uid === user.id) return;\r\n\r\n            return (\r\n              <div\r\n                key={user.id}\r\n                onClick={() => createNewChat(user.id)}\r\n                className=\"flex space-x-3 items-center p-2 cursor-pointer group hover:bg-cfblue-400 rounded-md\"\r\n              >\r\n                <img\r\n                  src={user.profilePicUrl}\r\n                  className=\"h-8 w-8 rounded-full\"\r\n                ></img>\r\n                <p className=\"text-lg text-gray-100\">{user.name}</p>\r\n                {user?.online && (\r\n                  <div className=\"bg-green-300 text-green-500 opacity-60 flex rounded-2xl text-xs p-1\">\r\n                    Online\r\n                  </div>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewChat;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\NewGroup.jsx",["172","173","174","175","176","177"],"import { useEffect, useState, useRef, useContext } from \"react\";\r\nimport {\r\n  createNewGroupChat,\r\n  getUsersList,\r\n} from \"../../../services/chatServices\";\r\nimport { useChatContext } from \"../../../context/ChatContext\";\r\nimport { useAuthContext } from \"../../../context/AuthContext\";\r\n\r\nconst NewGroup = ({ setIsOpen }) => {\r\n  const [usersList, setUsersList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const wrapperRef = useRef(null);\r\n  const { setOpenedChat } = useChatContext();\r\n  const { currentUser } = useAuthContext();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [groupName, setGroupName] = useState(\"\");\r\n\r\n  // Handler for closing the modal\r\n  const handleClickOutside = (e) => {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const addUser = (userId, user) => {\r\n    if (selectedUsers.some((su) => su.id == userId)) return;\r\n    setSelectedUsers((prev) => [user, ...prev]);\r\n  };\r\n\r\n  const removeUser = (userId) => {\r\n    const temp = selectedUsers.filter((su) => su.id != userId);\r\n    setSelectedUsers([...temp]);\r\n  };\r\n\r\n  const createGroup = async (e) => {\r\n    e.preventDefault();\r\n    const participants = selectedUsers.map((se) => se.id);\r\n    participants.push(currentUser.uid);\r\n    const newChat = await createNewGroupChat(participants, groupName);\r\n    setOpenedChat(newChat);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  // Get user list to add participants\r\n  const getUsers = async () => {\r\n    const res = await getUsersList();\r\n    const temp = res.filter((user) => user.id !== currentUser.uid);\r\n    setUsersList(temp);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUsers();\r\n\r\n    // Close the modal on click outside\r\n    document.addEventListener(\"click\", handleClickOutside, false);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClickOutside, false);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"bg-black text-white h-full w-full rounded-md p-2\"\r\n      ref={wrapperRef}\r\n    >\r\n      {/* Header */}\r\n      <div className=\"p-4 text-xl font-semibold border-b-2 border-cfblue-400\">\r\n        Create a new group\r\n      </div>\r\n\r\n      {/* List of people scrollable */}\r\n      {loading && (\r\n        <div className=\"flex items-center justify-center space-x-2 mt-32 animate-bounce\">\r\n          <div className=\"w-4 h-4 bg-cfblue-600 rounded-full\"></div>\r\n          <div className=\"w-4 h-4 bg-cfblue-600 rounded-full\"></div>\r\n          <div className=\"w-4 h-4 bg-cfblue-600 rounded-full\"></div>\r\n        </div>\r\n      )}\r\n\r\n      {selectedUsers && (\r\n        <div className=\"flex space-x-2 flex-wrap m-2\">\r\n          {selectedUsers.map((suser) => {\r\n            return (\r\n              <div\r\n                key={suser.id}\r\n                className=\"flex space-x-1 bg-cfblue-400 rounded-xl p-2 items-center mt-1\"\r\n              >\r\n                <p>{suser.name}</p>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    removeUser(suser.id);\r\n                  }}\r\n                  className=\"hover:text-cfblue-600 flex item\"\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className=\"h-5 w-5\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                    />\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n      <div className=\"max-h-1/2 flex flex-col m-4\">\r\n        <div className=\"overflow-y-scroll\">\r\n          {usersList.map((user) => {\r\n            if (currentUser.uid === user.id) return;\r\n\r\n            return (\r\n              <div\r\n                key={user.id}\r\n                onClick={() => addUser(user.id, user)}\r\n                className=\"flex space-x-3 items-center p-2 cursor-pointer group hover:bg-cfblue-400 rounded-md\"\r\n              >\r\n                <img\r\n                  src={user.profilePicUrl}\r\n                  className=\"h-8 w-8 rounded-full\"\r\n                ></img>\r\n                <p className=\"text-lg text-gray-100\">{user.name}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <form\r\n        onSubmit={createGroup}\r\n        className=\"flex p-2 justify-center items-center\"\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter group name\"\r\n          value={groupName}\r\n          onChange={(e) => setGroupName(e.target.value)}\r\n          className=\"p-2 outline-none rounded-md w-3/4 border-2 focus:border-cfblue-300 focus:placeholder-cfblue-300 text-gray-800 \"\r\n        ></input>\r\n        <div className=\" w-1/4 flex justify-center items-center\">\r\n          <button\r\n            type=\"submit\"\r\n            disabled={\r\n              !(groupName.trim().length > 0) || selectedUsers.length === 0\r\n            }\r\n            className=\"p-2 px-3 text-white  rounded-md shadow-md flex items-center bg-cfblue-600 hover:bg-cfblue-700 transition-colors duration-500 ease-in-out disabled:opacity-50\"\r\n          >\r\n            Create\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewGroup;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\context\\VideocallContext.js",[],"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\services\\videoCallService.js",["178","179","180","181","182","183"],"import {\r\n  collection,\r\n  query,\r\n  where,\r\n  onSnapshot,\r\n  doc,\r\n  addDoc,\r\n  getDoc,\r\n  updateDoc,\r\n  arrayUnion,\r\n  arrayRemove,\r\n  writeBatch,\r\n  getDocs,\r\n} from \"firebase/firestore\";\r\nimport { db } from \"../firebase\";\r\n\r\nexport const listenForVideoCalls = async (\r\n  userId,\r\n  setIncomingVideoCallInfo,\r\n  setIncomingCall\r\n) => {\r\n  const q = query(\r\n    collection(db, \"videocalls\"),\r\n    where(\"receivingCall\", \"array-contains\", userId)\r\n  );\r\n\r\n  const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n    querySnapshot.forEach((doc) => {\r\n      setIncomingVideoCallInfo({ id: doc.id, ...doc.data() });\r\n      setIncomingCall(true);\r\n    });\r\n  });\r\n};\r\n\r\n// Create RTC offers\r\nconst STUN_SERVERS = {\r\n  iceServers: [\r\n    {\r\n      urls: [\"stun:stun1.l.google.com:19302\", \"stun:stun2.l.google.com:19302\"],\r\n    },\r\n  ],\r\n  iceCandidatePoolSize: 10,\r\n};\r\n\r\nconst createRTCOffers = async (\r\n  participants,\r\n  userId,\r\n  tracks,\r\n  docId,\r\n  setStreams,\r\n  rtcConnections\r\n) => {\r\n  const offers = new Map();\r\n  const offerICECollectionRef = collection(db, `videocalls/${docId}/offerICE`);\r\n\r\n  for (let participant of participants) {\r\n    // Do not create offer the current user in participant array\r\n    if (participant === userId) continue;\r\n\r\n    let pc = new RTCPeerConnection(STUN_SERVERS);\r\n    let temp = rtcConnections.current;\r\n    rtcConnections.current = [[participant, pc], ...temp];\r\n\r\n    // Add local video and audio tracks to connection\r\n    tracks.getTracks().forEach((track) => {\r\n      pc.addTrack(track);\r\n    });\r\n\r\n    // On ice candidate handler\r\n    pc.onicecandidate = (event) =>\r\n      handleICEEvent(userId, participant, offerICECollectionRef, event);\r\n\r\n    // Remote stream event handler\r\n    const remoteStream = new MediaStream();\r\n    pc.ontrack = (event) =>\r\n      handleTrackEvent(participant, remoteStream, event, setStreams);\r\n\r\n    // Participant left handler\r\n    pc.oniceconnectionstatechange = (event) =>\r\n      handleParticipantLeftEvent(pc, participant, setStreams);\r\n\r\n    // Create the offer SDP\r\n    const sessionDescription = await pc.createOffer();\r\n    pc.setLocalDescription(sessionDescription);\r\n\r\n    // Add the RTC connection to map for each participant\r\n    offers.set(participant, {\r\n      offerSDP: sessionDescription,\r\n      sender: userId,\r\n      receiver: participant,\r\n      remoteStream: remoteStream,\r\n      rtcConn: pc,\r\n    });\r\n  }\r\n\r\n  return offers;\r\n};\r\n\r\nconst writeSDPOffers = async (\r\n  participants,\r\n  userId,\r\n  tracks,\r\n  docId,\r\n  setStreams,\r\n  rtcConnections\r\n) => {\r\n  // Get the map of RTC connection offers\r\n  const sdpOffers = await createRTCOffers(\r\n    participants,\r\n    userId,\r\n    tracks,\r\n    docId,\r\n    setStreams,\r\n    rtcConnections\r\n  );\r\n  const offerCollectionRef = collection(db, `videocalls/${docId}/offers`);\r\n\r\n  for (let value of sdpOffers.values()) {\r\n    await addDoc(offerCollectionRef, {\r\n      offer: JSON.stringify(value.offerSDP),\r\n      sender: value.sender,\r\n      receiver: value.receiver,\r\n    });\r\n  }\r\n\r\n  return sdpOffers;\r\n};\r\n\r\nexport const joinVideoCall = async (\r\n  docId,\r\n  userId,\r\n  tracks,\r\n  setStreams,\r\n  rtcConnections\r\n) => {\r\n  // Get participants list from call data\r\n  const docSnap = await getDoc(doc(db, \"videocalls\", docId));\r\n  const videoCallInfo = docSnap.data();\r\n\r\n  // Add current user to participants\r\n  updateDoc(doc(db, \"videocalls\", docId), {\r\n    participants: arrayUnion(userId),\r\n    receivingCall: arrayRemove(userId),\r\n  });\r\n\r\n  // Create and write SDP offers for every participant\r\n  const sdpOffers = await writeSDPOffers(\r\n    videoCallInfo.participants || [],\r\n    userId,\r\n    tracks,\r\n    docId,\r\n    setStreams,\r\n    rtcConnections\r\n  );\r\n\r\n  // Listen to SDP answers for current user\r\n  const answersCollectionRef = collection(db, `videocalls/${docId}/answers`);\r\n  const answerICECollectionRef = collection(\r\n    db,\r\n    `videocalls/${docId}/answerICE`\r\n  );\r\n\r\n  const answersQ = query(answersCollectionRef, where(\"receiver\", \"==\", userId));\r\n  const unsubscribeAnswers = onSnapshot(answersQ, (querySnapshot) => {\r\n    querySnapshot.docChanges().forEach((change) => {\r\n      if (change.type === \"added\") {\r\n        const answerData = change.doc.data();\r\n\r\n        const reqdRTCConn = sdpOffers.get(answerData.sender);\r\n        reqdRTCConn.rtcConn.setRemoteDescription(\r\n          new RTCSessionDescription(JSON.parse(answerData.offer))\r\n        );\r\n      }\r\n    });\r\n  });\r\n\r\n  // Listen to Answer ICE candidates\r\n  const qICE = query(answerICECollectionRef, where(\"receiver\", \"==\", userId));\r\n  const unsubscribeICE = onSnapshot(qICE, (querySnapshot) => {\r\n    querySnapshot.docChanges().forEach((change) => {\r\n      if (change.type === \"added\") {\r\n        const answerICE = change.doc.data();\r\n        const candidate = new RTCIceCandidate(answerICE.candidates);\r\n        const reqdRTCConn = sdpOffers.get(answerICE.sender);\r\n        reqdRTCConn.rtcConn.addIceCandidate(candidate);\r\n      }\r\n    });\r\n  });\r\n\r\n  //   Call the listenVideoCall function to listen for any new users that join the call\r\n  listenVideoCall(docId, userId, tracks, sdpOffers, setStreams, rtcConnections);\r\n};\r\n\r\nconst listenVideoCall = async (\r\n  docId,\r\n  userId,\r\n  tracks,\r\n  sdpOffers,\r\n  setStreams,\r\n  rtcConnections\r\n) => {\r\n  const offerCollectionRef = collection(db, `videocalls/${docId}/offers`);\r\n  const answerCollectionRef = collection(db, `videocalls/${docId}/answers`);\r\n  const offerICECollectinRef = collection(db, `videocalls/${docId}/offerICE`);\r\n  const answerICECollectionRef = collection(\r\n    db,\r\n    `videocalls/${docId}/answerICE`\r\n  );\r\n\r\n  // Listen for any offers made\r\n  const qListenToOffers = query(\r\n    offerCollectionRef,\r\n    where(\"receiver\", \"==\", userId)\r\n  );\r\n  const unsubscribeListenOffers = onSnapshot(\r\n    qListenToOffers,\r\n    (querySnapshot) => {\r\n      // querySnapshot.forEach(async (doc) => {\r\n      querySnapshot.docChanges().forEach(async (change) => {\r\n        if (change.type === \"added\") {\r\n          const offerData = change.doc.data();\r\n          let pc = new RTCPeerConnection(STUN_SERVERS);\r\n\r\n          let temp = rtcConnections.current;\r\n          rtcConnections.current = [[offerData.sender, pc], ...temp];\r\n\r\n          // Add local video and audio tracks to connection\r\n          tracks.getTracks().forEach((track) => {\r\n            pc.addTrack(track);\r\n          });\r\n\r\n          // On ice candidate handler\r\n          pc.onicecandidate = (event) =>\r\n            handleICEEvent(\r\n              userId,\r\n              offerData.sender,\r\n              answerICECollectionRef,\r\n              event\r\n            );\r\n\r\n          // Remote stream event handler\r\n          const remoteStream = new MediaStream();\r\n          pc.ontrack = (event) =>\r\n            handleTrackEvent(offerData.sender, remoteStream, event, setStreams);\r\n          pc.setRemoteDescription(\r\n            new RTCSessionDescription(JSON.parse(offerData.offer))\r\n          );\r\n\r\n          // Participant left handler\r\n          pc.oniceconnectionstatechange = (event) =>\r\n            handleParticipantLeftEvent(pc, offerData.sender, setStreams);\r\n\r\n          // Create the answer SDP\r\n          const sessionDescription = await pc.createAnswer();\r\n          pc.setLocalDescription(sessionDescription);\r\n\r\n          // Add the RTC connection to map for each participant\r\n          sdpOffers.set(offerData.sender, {\r\n            offerSDP: sessionDescription,\r\n            sender: userId,\r\n            receiver: offerData.sender,\r\n            remoteStream: remoteStream,\r\n            rtcConn: pc,\r\n          });\r\n\r\n          // Write the answer to the answers collection\r\n          addDoc(answerCollectionRef, {\r\n            offer: JSON.stringify(sessionDescription),\r\n            sender: userId,\r\n            receiver: offerData.sender,\r\n          });\r\n\r\n          // Listen to offer ICE candidates\r\n          const qICE = query(\r\n            offerICECollectinRef,\r\n            where(\"receiver\", \"==\", userId)\r\n          );\r\n          const unsubscribeICE = onSnapshot(qICE, (querySnapshot) => {\r\n            querySnapshot.docChanges().forEach((change) => {\r\n              if (change.type === \"added\") {\r\n                const offerICE = change.doc.data();\r\n                const candidate = new RTCIceCandidate(offerICE.candidates);\r\n                const reqdRTCConn = sdpOffers.get(offerICE.sender);\r\n                reqdRTCConn.rtcConn.addIceCandidate(candidate);\r\n              }\r\n            });\r\n          });\r\n        }\r\n      });\r\n    }\r\n  );\r\n};\r\n\r\nexport const createCall = async (\r\n  user,\r\n  callUsersList,\r\n  tracks,\r\n  setStreams,\r\n  rtcConnections,\r\n  videoCallId\r\n) => {\r\n  const docRef = await addDoc(collection(db, \"videocalls\"), {\r\n    participants: [],\r\n    receivingCall: callUsersList,\r\n    creatorName: user.displayName,\r\n    creatorPic: user.photoURL,\r\n  });\r\n\r\n  videoCallId.current = docRef.id;\r\n  joinVideoCall(docRef.id, user.uid, tracks, setStreams, rtcConnections);\r\n  setTimeout(async () => {\r\n    await updateDoc(docRef, {\r\n      receivingCall: [],\r\n    });\r\n  }, 15000);\r\n};\r\n\r\nexport const leaveCall = async (docId, userId, rtcConnections) => {\r\n  rtcConnections.current.forEach(([participant, pc]) => {\r\n    pc.close();\r\n    pc = null;\r\n  });\r\n\r\n  rtcConnections.current = [];\r\n\r\n  await updateDoc(doc(db, \"videocalls\", docId), {\r\n    participants: arrayRemove(userId),\r\n  });\r\n\r\n  // Get all the references for cleanup\r\n  const offerCollectionRef = collection(db, `videocalls/${docId}/offers`);\r\n  const answerCollectionRef = collection(db, `videocalls/${docId}/answers`);\r\n  const offerICECollectinRef = collection(db, `videocalls/${docId}/offerICE`);\r\n  const answerICECollectionRef = collection(\r\n    db,\r\n    `videocalls/${docId}/answerICE`\r\n  );\r\n\r\n  const offerDocRefSnapshotSender = getDocs(\r\n    offerCollectionRef,\r\n    where(\"sender\", \"==\", userId)\r\n  );\r\n  const offerDocRefSnapshotReceiver = getDocs(\r\n    offerCollectionRef,\r\n    where(\"receiver\", \"==\", userId)\r\n  );\r\n  const answerCollectionRefSender = getDocs(\r\n    answerCollectionRef,\r\n    where(\"sender\", \"==\", userId)\r\n  );\r\n  const answerCollectionRefReceiver = getDocs(\r\n    answerCollectionRef,\r\n    where(\"receiver\", \"==\", userId)\r\n  );\r\n  const offerICECollectinRefSender = getDocs(\r\n    offerICECollectinRef,\r\n    where(\"sender\", \"==\", userId)\r\n  );\r\n  const offerICECollectinRefReceiver = getDocs(\r\n    offerICECollectinRef,\r\n    where(\"receiver\", \"==\", userId)\r\n  );\r\n  const answerICECollectionRefSender = getDocs(\r\n    answerICECollectionRef,\r\n    where(\"sender\", \"==\", userId)\r\n  );\r\n  const answerICECollectionRefReceiver = getDocs(\r\n    answerICECollectionRef,\r\n    where(\"receiver\", \"==\", userId)\r\n  );\r\n\r\n  let promises = [\r\n    offerDocRefSnapshotSender,\r\n    offerDocRefSnapshotReceiver,\r\n    answerCollectionRefSender,\r\n    answerCollectionRefReceiver,\r\n    offerICECollectinRefSender,\r\n    offerICECollectinRefReceiver,\r\n    answerICECollectionRefSender,\r\n    answerICECollectionRefReceiver,\r\n  ];\r\n\r\n  const deleteBatch = writeBatch(db);\r\n  const results = await Promise.all(promises);\r\n\r\n  results.forEach((result) => {\r\n    result.forEach((res) => deleteBatch.delete(res.ref));\r\n  });\r\n\r\n  await deleteBatch.commit();\r\n};\r\n\r\nexport const declineIncomingCall = async (docId, userId) => {\r\n  await updateDoc(doc(db, \"videocalls\", docId), {\r\n    receivingCall: arrayRemove(userId),\r\n  });\r\n};\r\n// On track handlers\r\nconst handleTrackEvent = (participant, remoteStream, event, setStreams) => {\r\n  if (event.track) {\r\n    remoteStream.addTrack(event.track);\r\n    setStreams((prevStreams) => {\r\n      for (let [p, rs] of prevStreams) {\r\n        if (rs === remoteStream) return prevStreams;\r\n      }\r\n      return [[participant, remoteStream], ...prevStreams];\r\n    });\r\n  }\r\n};\r\n\r\nconst handleICEEvent = (userId, participant, collectionRef, event) => {\r\n  if (event.candidate) {\r\n    addDoc(collectionRef, {\r\n      sender: userId,\r\n      receiver: participant,\r\n      candidates: event.candidate.toJSON(),\r\n    });\r\n  }\r\n};\r\n\r\nconst handleParticipantLeftEvent = (pc, participant, setStreams) => {\r\n  if ([\"disconnected\", \"failed\", \"closed\"].includes(pc.iceConnectionState)) {\r\n    setStreams((prevStreams) => {\r\n      const updatedStreams = prevStreams.filter(\r\n        ([userId, stream]) => userId !== participant\r\n      );\r\n      return updatedStreams;\r\n    });\r\n  }\r\n};\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\videoCall\\VideoCallBanner.jsx",["184","185","186","187"],"import { useState, useEffect, useRef } from \"react\";\r\nimport { useHistory, withRouter } from \"react-router\";\r\nimport { useAuthContext } from \"../../context/AuthContext\";\r\nimport { useVideoCallContext } from \"../../context/VideocallContext\";\r\nimport { declineIncomingCall } from \"../../services/videoCallService\";\r\n\r\nconst VideoCallBanner = ({ setIsOpen }) => {\r\n  const wrapperRef = useRef(null);\r\n  const { currentUser } = useAuthContext();\r\n  const {\r\n    setInCall,\r\n    setIncomingCall,\r\n    incomingCallInfo,\r\n    setIncomingCallInfo,\r\n    setCreatedCall,\r\n    setUsersList,\r\n  } = useVideoCallContext();\r\n  const history = useHistory();\r\n  let incomingCallAudio = new Audio(\"IncomingCall.mp3\");\r\n  incomingCallAudio.load();\r\n  incomingCallAudio.loop = true;\r\n\r\n  useEffect(() => {\r\n    incomingCallAudio.play();\r\n\r\n    return () => {\r\n      incomingCallAudio.pause();\r\n    };\r\n  }, []);\r\n\r\n  // Call handlers\r\n  const acceptCall = () => {\r\n    setInCall(true);\r\n    setIncomingCall(false);\r\n    history.push(\"/videocall\");\r\n  };\r\n\r\n  const declineCall = () => {\r\n    declineIncomingCall(incomingCallInfo.id, currentUser.uid);\r\n    incomingCallAudio.pause();\r\n    setCreatedCall(false);\r\n    setIncomingCallInfo(false);\r\n    setIncomingCall(false);\r\n    setInCall(false);\r\n    setUsersList([]);\r\n  };\r\n\r\n  // Handler for closing the modal\r\n  const handleClickOutside = (e) => {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Close the modal on click outside\r\n    document.addEventListener(\"click\", handleClickOutside, false);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClickOutside, false);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"bg-black text-gray-100 max-h-full w-4/5 rounded-md p-8\"\r\n      ref={wrapperRef}\r\n    >\r\n      <div className=\"flex flex-col justify-center items-center\">\r\n        <div className=\"flex flex-col space-y-4\">\r\n          {/* Caller info */}\r\n          <div className=\"flex space-x-2 justify-center items-center mb-6\">\r\n            <img\r\n              src={incomingCallInfo.creatorPic}\r\n              className=\"h-12 w-12 rounded-full\"\r\n            ></img>\r\n            <p className=\"font-semibold text-2xl\">\r\n              {incomingCallInfo.creatorName} is calling\r\n            </p>\r\n          </div>\r\n\r\n          {/* Buttons */}\r\n          <div className=\"flex justify-between text-white\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"p-3 px-6  bg-red-600 rounded-xl hover:bg-red-800 transition-colors duration-150 ease-in-out shadown-sm\"\r\n              onClick={declineCall}\r\n            >\r\n              Decline\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"p-3 px-6  rounded-xl bg-cfblue-600 hover:bg-cfblue-700  transition-colors duration-150 ease-in-out shadow-sm\"\r\n              onClick={acceptCall}\r\n            >\r\n              Accept\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst VideoCallBannerRouter = withRouter(VideoCallBanner);\r\n\r\nexport default VideoCallBannerRouter;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\videoCall\\VideoCallDashboard.jsx",["188","189"],"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\videoCall\\VideoCard.jsx",["190"],"import { useRef, useEffect } from \"react\";\r\n\r\nconst VideoCard = ({ stream, isMuted }) => {\r\n  const srcRef = useRef();\r\n\r\n  useEffect(() => {\r\n    srcRef.current.srcObject = stream;\r\n  }, []);\r\n\r\n  return (\r\n    <video\r\n      ref={srcRef}\r\n      autoPlay\r\n      muted={isMuted}\r\n      playsInline\r\n      controls={false}\r\n      width={400}\r\n      height={400}\r\n    />\r\n  );\r\n};\r\n\r\nexport default VideoCard;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\SendImage.jsx",["191","192","193","194"],"C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\ImageDisplay.jsx",["195","196"],"import { useRef, useEffect } from \"react\";\r\n\r\nconst ImageDisplay = ({ imageURL, setIsOpen }) => {\r\n  const wrapperRef = useRef();\r\n\r\n  // Handler for closing the modal\r\n  const handleClickOutside = (e) => {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Close the modal on click outside\r\n    document.addEventListener(\"click\", handleClickOutside, false);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClickOutside, false);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"fixed h-screen w-screen inset-0\">\r\n      <img\r\n        ref={wrapperRef}\r\n        src={imageURL}\r\n        className=\"h-1/2 max-w-1/2 m-auto\"\r\n      ></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageDisplay;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\ChangeStatus.jsx",["197","198"],"import { useState, useEffect } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { changeUserStatus } from \"../../../services/userAccountService\";\r\n\r\nconst ChangeStatus = ({ setIsOpen, updateUserData, userId }) => {\r\n  const wrapperRef = useRef();\r\n  const [updatedStatus, setUpdatedStatus] = useState(\"\");\r\n\r\n  // Handler for closing the modal\r\n  const handleClickOutside = (e) => {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const onSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    const res = changeUserStatus(userId, updatedStatus);\r\n    updateUserData((prevData) => ({ ...prevData, status: updatedStatus }));\r\n    setIsOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Close the modal on click outside\r\n    document.addEventListener(\"click\", handleClickOutside, false);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClickOutside, false);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"bg-black text-white max-h-full w-full rounded-md p-2\"\r\n      ref={wrapperRef}\r\n    >\r\n      {/* Header */}\r\n      <div className=\"h-1/8 p-4 text-xl font-semibold border-b-2 border-cfblue-400\">\r\n        Edit status\r\n      </div>\r\n\r\n      <form\r\n        onSubmit={onSubmitHandler}\r\n        className=\"flex justify-between items-center p-4\"\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          onChange={(e) => setUpdatedStatus(e.target.value)}\r\n          value={updatedStatus}\r\n          placeholder=\"Edit status\"\r\n          maxLength=\"60\"\r\n          className=\"outline-none w-4/5 bg-light-dark rounded-lg p-2 border-2 focus:border-cfblue-300 focus:placeholder-cfblue-300 text-gray-800 \"\r\n        ></input>\r\n        <button\r\n          type=\"submit\"\r\n          disabled={!updatedStatus.trim()}\r\n          className=\"w-1/5 ml-2 p-2 text-white  rounded-md shadow-md flex items-center bg-cfblue-600 hover:bg-cfblue-700 transition-colors duration-500 ease-in-out disabled:opacity-50 justify-center\"\r\n        >\r\n          Update\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChangeStatus;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\ChatInfo.jsx",["199","200","201","202"],"import { useRef, useState, useEffect } from \"react\";\r\nimport { formatDistanceToNowStrict } from \"date-fns\";\r\nimport { useAuthContext } from \"../../../context/AuthContext\";\r\n\r\nconst ChatInfoGroup = ({ participantInfo }) => {\r\n  const { currentUser } = useAuthContext();\r\n  return (\r\n    <div className=\"flex flex-col space-y-5 p-4\">\r\n      {/* Participant list */}\r\n      {participantInfo.participants.map((participant) => {\r\n        if (participant.id !== currentUser.uid) {\r\n          return (\r\n            <div className=\"flex space-x-2\">\r\n              <img\r\n                src={participant.profilePicUrl}\r\n                className=\"h-10 w-10 rounded-full\"\r\n              ></img>\r\n              <div className=\"flex flex-col\">\r\n                <p>{participant.name}</p>\r\n                <p className=\"text-sm\">{participant.status}</p>\r\n              </div>\r\n            </div>\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ChatInfoDual = ({ participantInfo }) => {\r\n  return (\r\n    <div className=\"flex flex-col items-center p-4 space-y-3\">\r\n      <img\r\n        src={participantInfo.profilePicUrl}\r\n        className=\"h-12 w-12 md:h-24 md:w-24 rounded-full\"\r\n      ></img>\r\n      <p>{participantInfo.status}</p>\r\n      {!participantInfo.online ? (\r\n        <p className=\"text-xs text-green-700\">Online</p>\r\n      ) : (\r\n        <p className=\"text-xs text-gray-200\">\r\n          Last seen:\r\n          {\" \" +\r\n            formatDistanceToNowStrict(\r\n              new Date(participantInfo.lastSeen.seconds * 1000)\r\n            ) +\r\n            \" ago\"}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ChatInfo = ({ isGroup, setIsOpen, participantInfo }) => {\r\n  const wrapperRef = useRef();\r\n\r\n  const handleClickOutside = (e) => {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Close the modal on click outside\r\n    document.addEventListener(\"click\", handleClickOutside, false);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClickOutside, false);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"bg-black text-white max-h-full w-full rounded-md p-2\"\r\n      ref={wrapperRef}\r\n    >\r\n      {/* Header */}\r\n      <div className=\"h-1/8 p-4 text-xl font-semibold border-b-2 border-cfblue-400\">\r\n        {participantInfo.name}\r\n      </div>\r\n      {isGroup && <ChatInfoGroup participantInfo={participantInfo} />}\r\n      {!isGroup && <ChatInfoDual participantInfo={participantInfo} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInfo;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\dashboard\\modals\\AddParticipants.jsx",["203","204","205","206","207","208"],"import { useRef, useState, useEffect } from \"react\";\r\nimport { useAuthContext } from \"../../../context/AuthContext\";\r\nimport { useChatContext } from \"../../../context/ChatContext\";\r\nimport {\r\n  getUsersList,\r\n  addParticipantsGroup,\r\n} from \"../../../services/chatServices\";\r\n\r\nconst AddParticipants = ({ setIsOpen, participants }) => {\r\n  const [usersList, setUsersList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n\r\n  const { currentUser } = useAuthContext();\r\n  const { openedChat, setOpenedChat } = useChatContext();\r\n\r\n  const wrapperRef = useRef();\r\n\r\n  const handleClickOutside = (e) => {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const getUsers = async () => {\r\n    const compare = (userid) => {\r\n      for (let p of participants) {\r\n        if (p.id === userid) return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    const res = await getUsersList();\r\n    const temp = res.filter((user) => compare(user.id));\r\n    setUsersList(temp);\r\n    setLoading(false);\r\n  };\r\n\r\n  const addUser = (userId, user) => {\r\n    if (selectedUsers.some((su) => su.id == userId)) return;\r\n    setSelectedUsers((prev) => [user, ...prev]);\r\n  };\r\n\r\n  const removeUser = (userId) => {\r\n    const temp = selectedUsers.filter((su) => su.id != userId);\r\n    setSelectedUsers([...temp]);\r\n  };\r\n\r\n  const addUsersToGroup = async () => {\r\n    setLoading(true);\r\n    const userIds = selectedUsers.map((su) => su.id);\r\n    const result = await addParticipantsGroup(openedChat.id, userIds);\r\n    setOpenedChat((prevData) => ({\r\n      ...prevData,\r\n      participants: [...prevData.participants, ...userIds],\r\n    }));\r\n    setIsOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUsers();\r\n\r\n    // Close the modal on click outside\r\n    document.addEventListener(\"click\", handleClickOutside, false);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClickOutside, false);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"bg-black text-white max-h-full w-full rounded-md p-2 flex flex-col\"\r\n      ref={wrapperRef}\r\n    >\r\n      {/* Header */}\r\n      <div className=\"h-1/8 p-4 text-xl font-semibold border-b-2 border-cfblue-400\">\r\n        Add users\r\n      </div>\r\n\r\n      {/* List of people scrollable */}\r\n      {loading && (\r\n        <div className=\"flex items-center justify-center space-x-2 mt-32 animate-bounce\">\r\n          <div className=\"w-4 h-4 bg-cfblue-600 rounded-full\"></div>\r\n          <div className=\"w-4 h-4 bg-cfblue-600 rounded-full\"></div>\r\n          <div className=\"w-4 h-4 bg-cfblue-600 rounded-full\"></div>\r\n        </div>\r\n      )}\r\n\r\n      {selectedUsers && (\r\n        <div className=\"flex space-x-2 flex-wrap m-2\">\r\n          {selectedUsers.map((suser) => {\r\n            return (\r\n              <div\r\n                key={suser.id}\r\n                className=\"flex space-x-1 bg-cfblue-400 rounded-xl p-2 items-center\"\r\n              >\r\n                <p>{suser.name}</p>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    removeUser(suser.id);\r\n                  }}\r\n                  className=\"hover:text-cfblue-600 flex item\"\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className=\"h-5 w-5\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                    />\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n      <div className=\"flex flex-col overflow-y-scroll no-scrollbar m-4\">\r\n        {usersList.map((user) => {\r\n          if (currentUser.uid === user.id) return;\r\n\r\n          return (\r\n            <div\r\n              key={user.id}\r\n              onClick={() => addUser(user.id, user)}\r\n              className=\"flex space-x-3 items-center p-2 cursor-pointer group hover:bg-cfblue-400 rounded-md\"\r\n            >\r\n              <img\r\n                src={user.profilePicUrl}\r\n                className=\"h-8 w-8 rounded-full\"\r\n              ></img>\r\n              <p className=\"text-lg text-gray-100\">{user.name}</p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      <button\r\n        disabled={selectedUsers.length === 0}\r\n        onClick={addUsersToGroup}\r\n        className=\"p-2 px-3 text-white self-center  rounded-md shadow-md flex items-center bg-cfblue-600 hover:bg-cfblue-700 transition-colors duration-500 ease-in-out disabled:opacity-50\"\r\n      >\r\n        Add to group\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddParticipants;\r\n","C:\\Users\\Nikhil\\Nikhil's Stuff\\Coding\\Projects\\Colloquy\\colloquy\\src\\components\\ProtectedRoute.jsx",["209"],"import { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAuthContext } from \"../context/AuthContext\";\r\n\r\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\r\n  const { currentUser } = useAuthContext();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (currentUser) {\r\n          return <Component />;\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              to={{ pathname: \"/login\", state: { from: props.location } }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProtectedRoute;\r\n",{"ruleId":"210","severity":1,"message":"211","line":38,"column":6,"nodeType":"212","endLine":38,"endColumn":8,"suggestions":"213"},{"ruleId":"214","severity":1,"message":"215","line":27,"column":11,"nodeType":"216","messageId":"217","endLine":27,"endColumn":17},{"ruleId":"214","severity":1,"message":"215","line":50,"column":11,"nodeType":"216","messageId":"217","endLine":50,"endColumn":17},{"ruleId":"214","severity":1,"message":"215","line":65,"column":9,"nodeType":"216","messageId":"217","endLine":65,"endColumn":15},{"ruleId":"214","severity":1,"message":"218","line":6,"column":3,"nodeType":"216","messageId":"217","endLine":6,"endColumn":23},{"ruleId":"210","severity":1,"message":"219","line":32,"column":6,"nodeType":"212","endLine":32,"endColumn":8,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":37,"column":9,"nodeType":"223","endLine":40,"endColumn":10},{"ruleId":"214","severity":1,"message":"224","line":24,"column":9,"nodeType":"216","messageId":"217","endLine":24,"endColumn":20},{"ruleId":"210","severity":1,"message":"225","line":23,"column":6,"nodeType":"212","endLine":23,"endColumn":8,"suggestions":"226"},{"ruleId":"214","severity":1,"message":"227","line":3,"column":10,"nodeType":"216","messageId":"217","endLine":3,"endColumn":24},{"ruleId":"210","severity":1,"message":"228","line":28,"column":6,"nodeType":"212","endLine":28,"endColumn":8,"suggestions":"229"},{"ruleId":"230","severity":1,"message":"231","line":46,"column":17,"nodeType":"232","messageId":"233","endLine":46,"endColumn":19},{"ruleId":"210","severity":1,"message":"234","line":86,"column":6,"nodeType":"212","endLine":86,"endColumn":18,"suggestions":"235"},{"ruleId":"214","severity":1,"message":"215","line":27,"column":9,"nodeType":"216","messageId":"217","endLine":27,"endColumn":15},{"ruleId":"214","severity":1,"message":"236","line":108,"column":9,"nodeType":"216","messageId":"217","endLine":108,"endColumn":19},{"ruleId":"214","severity":1,"message":"215","line":25,"column":11,"nodeType":"216","messageId":"217","endLine":25,"endColumn":17},{"ruleId":"221","severity":1,"message":"222","line":18,"column":11,"nodeType":"223","endLine":24,"endColumn":12},{"ruleId":"221","severity":1,"message":"222","line":45,"column":11,"nodeType":"223","endLine":48,"endColumn":12},{"ruleId":"214","severity":1,"message":"237","line":1,"column":10,"nodeType":"216","messageId":"217","endLine":1,"endColumn":16},{"ruleId":"214","severity":1,"message":"238","line":1,"column":18,"nodeType":"216","messageId":"217","endLine":1,"endColumn":27},{"ruleId":"214","severity":1,"message":"239","line":1,"column":29,"nodeType":"216","messageId":"217","endLine":1,"endColumn":42},{"ruleId":"214","severity":1,"message":"240","line":1,"column":39,"nodeType":"216","messageId":"217","endLine":1,"endColumn":49},{"ruleId":"210","severity":1,"message":"241","line":44,"column":6,"nodeType":"212","endLine":44,"endColumn":8,"suggestions":"242"},{"ruleId":"230","severity":1,"message":"231","line":67,"column":46,"nodeType":"243","messageId":"244","endLine":67,"endColumn":53},{"ruleId":"221","severity":1,"message":"222","line":75,"column":17,"nodeType":"223","endLine":78,"endColumn":18},{"ruleId":"214","severity":1,"message":"240","line":1,"column":39,"nodeType":"216","messageId":"217","endLine":1,"endColumn":49},{"ruleId":"245","severity":1,"message":"246","line":26,"column":42,"nodeType":"247","messageId":"248","endLine":26,"endColumn":44},{"ruleId":"245","severity":1,"message":"249","line":31,"column":53,"nodeType":"247","messageId":"248","endLine":31,"endColumn":55},{"ruleId":"210","severity":1,"message":"250","line":60,"column":6,"nodeType":"212","endLine":60,"endColumn":8,"suggestions":"251"},{"ruleId":"230","severity":1,"message":"231","line":121,"column":46,"nodeType":"243","messageId":"244","endLine":121,"endColumn":53},{"ruleId":"221","severity":1,"message":"222","line":129,"column":17,"nodeType":"223","endLine":132,"endColumn":18},{"ruleId":"214","severity":1,"message":"224","line":27,"column":9,"nodeType":"216","messageId":"217","endLine":27,"endColumn":20},{"ruleId":"214","severity":1,"message":"252","line":164,"column":9,"nodeType":"216","messageId":"217","endLine":164,"endColumn":27},{"ruleId":"214","severity":1,"message":"253","line":179,"column":9,"nodeType":"216","messageId":"217","endLine":179,"endColumn":23},{"ruleId":"214","severity":1,"message":"254","line":215,"column":9,"nodeType":"216","messageId":"217","endLine":215,"endColumn":32},{"ruleId":"214","severity":1,"message":"253","line":278,"column":17,"nodeType":"216","messageId":"217","endLine":278,"endColumn":31},{"ruleId":"214","severity":1,"message":"255","line":403,"column":17,"nodeType":"216","messageId":"217","endLine":403,"endColumn":18},{"ruleId":"214","severity":1,"message":"256","line":1,"column":10,"nodeType":"216","messageId":"217","endLine":1,"endColumn":18},{"ruleId":"210","severity":1,"message":"257","line":29,"column":6,"nodeType":"212","endLine":29,"endColumn":8,"suggestions":"258"},{"ruleId":"210","severity":1,"message":"241","line":61,"column":6,"nodeType":"212","endLine":61,"endColumn":8,"suggestions":"259"},{"ruleId":"221","severity":1,"message":"222","line":72,"column":13,"nodeType":"223","endLine":75,"endColumn":14},{"ruleId":"210","severity":1,"message":"260","line":76,"column":61,"nodeType":"216","endLine":76,"endColumn":68},{"ruleId":"210","severity":1,"message":"261","line":82,"column":6,"nodeType":"212","endLine":82,"endColumn":8,"suggestions":"262"},{"ruleId":"210","severity":1,"message":"263","line":8,"column":6,"nodeType":"212","endLine":8,"endColumn":8,"suggestions":"264"},{"ruleId":"210","severity":1,"message":"265","line":27,"column":6,"nodeType":"212","endLine":27,"endColumn":20,"suggestions":"266"},{"ruleId":"210","severity":1,"message":"241","line":35,"column":6,"nodeType":"212","endLine":35,"endColumn":8,"suggestions":"267"},{"ruleId":"214","severity":1,"message":"215","line":67,"column":11,"nodeType":"216","messageId":"217","endLine":67,"endColumn":17},{"ruleId":"221","severity":1,"message":"222","line":84,"column":11,"nodeType":"223","endLine":84,"endColumn":62},{"ruleId":"210","severity":1,"message":"241","line":19,"column":6,"nodeType":"212","endLine":19,"endColumn":8,"suggestions":"268"},{"ruleId":"221","severity":1,"message":"222","line":23,"column":7,"nodeType":"223","endLine":27,"endColumn":8},{"ruleId":"214","severity":1,"message":"269","line":18,"column":11,"nodeType":"216","messageId":"217","endLine":18,"endColumn":14},{"ruleId":"210","severity":1,"message":"241","line":29,"column":6,"nodeType":"212","endLine":29,"endColumn":8,"suggestions":"270"},{"ruleId":"214","severity":1,"message":"256","line":1,"column":18,"nodeType":"216","messageId":"217","endLine":1,"endColumn":26},{"ruleId":"221","severity":1,"message":"222","line":14,"column":15,"nodeType":"223","endLine":17,"endColumn":16},{"ruleId":"221","severity":1,"message":"222","line":34,"column":7,"nodeType":"223","endLine":37,"endColumn":8},{"ruleId":"210","severity":1,"message":"241","line":70,"column":6,"nodeType":"212","endLine":70,"endColumn":8,"suggestions":"271"},{"ruleId":"245","severity":1,"message":"246","line":40,"column":42,"nodeType":"247","messageId":"248","endLine":40,"endColumn":44},{"ruleId":"245","severity":1,"message":"249","line":45,"column":53,"nodeType":"247","messageId":"248","endLine":45,"endColumn":55},{"ruleId":"214","severity":1,"message":"215","line":52,"column":11,"nodeType":"216","messageId":"217","endLine":52,"endColumn":17},{"ruleId":"210","severity":1,"message":"250","line":68,"column":6,"nodeType":"212","endLine":68,"endColumn":8,"suggestions":"272"},{"ruleId":"230","severity":1,"message":"231","line":128,"column":44,"nodeType":"243","messageId":"244","endLine":128,"endColumn":51},{"ruleId":"221","severity":1,"message":"222","line":136,"column":15,"nodeType":"223","endLine":139,"endColumn":16},{"ruleId":"214","severity":1,"message":"240","line":1,"column":10,"nodeType":"216","messageId":"217","endLine":1,"endColumn":20},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'auth' and 'currentUser'. Either include them or remove the dependency array.","ArrayExpression",["273"],"no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","'getUserConversations' is defined but never used.","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["274"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'unsubscribe' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentUser.uid'. Either include it or remove the dependency array.",["275"],"'useChatContext' is defined but never used.","React Hook useEffect has missing dependencies: 'chat.group', 'chat.name', 'chat.participants', 'currentUser.uid', and 'getUserName'. Either include them or remove the dependency array. If 'setChatName' needs the current value of 'chat.name', you can also switch to useReducer instead of useState and read 'chat.name' in the reducer.",["276"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'currentUser.uid' and 'getParticipants'. Either include them or remove the dependency array.",["277"],"'uploadFile' is assigned a value but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'createContext' is defined but never used.","'useContext' is defined but never used.","React Hook useEffect has a missing dependency: 'handleClickOutside'. Either include it or remove the dependency array.",["278"],"ReturnStatement","expectedReturnValue","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'getUsers' and 'handleClickOutside'. Either include them or remove the dependency array.",["279"],"'unsubscribeAnswers' is assigned a value but never used.","'unsubscribeICE' is assigned a value but never used.","'unsubscribeListenOffers' is assigned a value but never used.","'p' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'incomingCallAudio'. Either include it or remove the dependency array.",["280"],["281"],"The ref value 'videoCallId.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'videoCallId.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'currentUser.uid', 'endedCall', 'joinCall', and 'videoCallCtx'. Either include them or remove the dependency array.",["282"],"React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["283"],"React Hook useEffect has a missing dependency: 'previewFile'. Either include it or remove the dependency array.",["284"],["285"],["286"],"'res' is assigned a value but never used.",["287"],["288"],["289"],{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"300","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"300","fix":"313"},{"desc":"300","fix":"314"},{"desc":"300","fix":"315"},{"desc":"300","fix":"316"},{"desc":"302","fix":"317"},"Update the dependencies array to be: [auth, currentUser]",{"range":"318","text":"319"},"Update the dependencies array to be: [getUser]",{"range":"320","text":"321"},"Update the dependencies array to be: [currentUser.uid]",{"range":"322","text":"323"},"Update the dependencies array to be: [chat.group, chat.name, chat.participants, currentUser.uid, getUserName]",{"range":"324","text":"325"},"Update the dependencies array to be: [currentUser.uid, getParticipants, openedChat]",{"range":"326","text":"327"},"Update the dependencies array to be: [handleClickOutside]",{"range":"328","text":"329"},"Update the dependencies array to be: [getUsers, handleClickOutside]",{"range":"330","text":"331"},"Update the dependencies array to be: [incomingCallAudio]",{"range":"332","text":"333"},{"range":"334","text":"329"},"Update the dependencies array to be: [currentUser.uid, endedCall, joinCall, videoCallCtx]",{"range":"335","text":"336"},"Update the dependencies array to be: [stream]",{"range":"337","text":"338"},"Update the dependencies array to be: [previewFile, selectedFile]",{"range":"339","text":"340"},{"range":"341","text":"329"},{"range":"342","text":"329"},{"range":"343","text":"329"},{"range":"344","text":"329"},{"range":"345","text":"331"},[1072,1074],"[auth, currentUser]",[913,915],"[getUser]",[683,685],"[currentUser.uid]",[847,849],"[chat.group, chat.name, chat.participants, currentUser.uid, getUserName]",[2837,2849],"[currentUser.uid, getParticipants, openedChat]",[1339,1341],"[handleClickOutside]",[1947,1949],"[getUsers, handleClickOutside]",[888,890],"[incomingCallAudio]",[1733,1735],[2304,2306],"[currentUser.uid, endedCall, joinCall, videoCallCtx]",[188,190],"[stream]",[835,849],"[previewFile, selectedFile]",[1091,1093],[557,559],[972,974],[2133,2135],[2040,2042]]